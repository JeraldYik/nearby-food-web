{"ast":null,"code":"// import { NextApiRequest, NextApiResponse } from 'next';\n// import runMiddlewares from 'lib/api/middlewares';\nimport cors from 'cors'; //   // Initialize the cors middleware\n//   const cors = initMiddleware(\n//     // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n//     Cors()\n//   );\n//   // // Run cors\n//   await cors(req, res);\n//   // // Rest of the API logic\n//   res.json({ message: 'Hello Everyone!' });\n//   // await runMiddlewares(req, res);\n//   // res.statusCode = 200;\n//   // res.json({ hello: 'world' });\n// };\n// function initMiddleware(middleware) {\n//   return (req, res) =>\n//     new Promise((resolve, reject) => {\n//       middleware(req, res, (result) => {\n//         if (result instanceof Error) {\n//           return reject(result);\n//         }\n//         return resolve(result);\n//       });\n//     });\n// }\n\n// import nextConnect from 'next-connect';\nimport API from 'lib/api/call';\n\nconst testMiddleware = (req, res, next) => {\n  cors(req, res, result => {\n    console.log(result);\n  });\n  console.log('middleware');\n  next();\n};\n\nexport default (async (req, res) => {\n  console.log(req.query);\n  const baseURL = 'https://maps.googleapis.com/maps/api/geocode/json';\n  const response = await API.get(false, baseURL, null, req.query, null);\n  res.send(response);\n}); // const handler = nextConnect()\n//   // .use(testMiddleware)\n//   .get(\n//     async (req: NextApiRequest, res: NextApiResponse): Promise<Response | void> => {\n//       console.log(req.query);\n//       const baseURL = 'https://maps.googleapis.com/maps/api/geocode/json';\n//       const response = await API.get(false, baseURL, null, req.query, null);\n//       res.send(response);\n//     }\n//   );\n// export default handler;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/pages/api/googleConsole.ts"],"names":["cors","API","testMiddleware","req","res","next","result","console","log","query","baseURL","response","get","send"],"mappings":"AAAA;AACA;AAEA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,MAAMC,cAAc,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACzCL,EAAAA,IAAI,CAACG,GAAD,EAAMC,GAAN,EAAYE,MAAD,IAAY;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GAFG,CAAJ;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAH,EAAAA,IAAI;AACL,CAND;;AAQA,gBAAe,OAAOF,GAAP,EAA4BC,GAA5B,KAA+E;AAC5FG,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACM,KAAhB;AACA,QAAMC,OAAO,GAAG,mDAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQ,KAAR,EAAeF,OAAf,EAAwB,IAAxB,EAA8BP,GAAG,CAACM,KAAlC,EAAyC,IAAzC,CAAvB;AACAL,EAAAA,GAAG,CAACS,IAAJ,CAASF,QAAT;AACD,CALD,E,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { NextApiRequest, NextApiResponse } from 'next';\n// import runMiddlewares from 'lib/api/middlewares';\n\nimport cors from 'cors';\n\n//   // Initialize the cors middleware\n//   const cors = initMiddleware(\n//     // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n//     Cors()\n//   );\n\n//   // // Run cors\n//   await cors(req, res);\n\n//   // // Rest of the API logic\n//   res.json({ message: 'Hello Everyone!' });\n\n//   // await runMiddlewares(req, res);\n//   // res.statusCode = 200;\n//   // res.json({ hello: 'world' });\n// };\n\n// function initMiddleware(middleware) {\n//   return (req, res) =>\n//     new Promise((resolve, reject) => {\n//       middleware(req, res, (result) => {\n//         if (result instanceof Error) {\n//           return reject(result);\n//         }\n//         return resolve(result);\n//       });\n//     });\n// }\n\nimport { NextApiRequest, NextApiResponse } from 'next';\n// import nextConnect from 'next-connect';\nimport API from 'lib/api/call';\n\nconst testMiddleware = (req, res, next) => {\n  cors(req, res, (result) => {\n    console.log(result);\n  });\n  console.log('middleware');\n  next();\n};\n\nexport default async (req: NextApiRequest, res: NextApiResponse): Promise<Response | void> => {\n  console.log(req.query);\n  const baseURL = 'https://maps.googleapis.com/maps/api/geocode/json';\n  const response = await API.get(false, baseURL, null, req.query, null);\n  res.send(response);\n};\n\n// const handler = nextConnect()\n//   // .use(testMiddleware)\n//   .get(\n//     async (req: NextApiRequest, res: NextApiResponse): Promise<Response | void> => {\n//       console.log(req.query);\n//       const baseURL = 'https://maps.googleapis.com/maps/api/geocode/json';\n//       const response = await API.get(false, baseURL, null, req.query, null);\n//       res.send(response);\n//     }\n//   );\n\n// export default handler;\n"]},"metadata":{},"sourceType":"module"}