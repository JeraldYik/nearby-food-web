{"ast":null,"code":"import axios from 'axios';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst baseURL = publicRuntimeConfig.BASE_URL || '';\nconst corsBypassURL = publicRuntimeConfig.CORS_BYPASS_URL || '';\nconst API = {\n  get: async (internal, path, params, queries, body) => {\n    console.log(path);\n\n    try {\n      const url = generateURL(internal, path, params, queries);\n      console.log(url); // TODO: use middleware approach to enable CORS\n\n      const response = await axios.get(corsBypassURL + url); // const response = await axios.get(corsBypassURL + baseURL + path);\n\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error(error.response.data);\n        console.error(error.response.status);\n        console.error(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.error(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error', error.message);\n      }\n\n      console.error(error.config);\n    }\n  }\n};\nexport const generateURL = (internal, path, params, queries) => {\n  let finalURL = '';\n\n  if (internal) {\n    finalURL = path.charAt(0) === baseURL + '/' ? path : baseURL + '/' + path;\n  } else {\n    finalURL = path;\n  }\n\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter(k => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\nexport default API;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/call.ts"],"names":["axios","getConfig","publicRuntimeConfig","baseURL","BASE_URL","corsBypassURL","CORS_BYPASS_URL","API","get","internal","path","params","queries","body","console","log","url","generateURL","response","data","error","status","headers","request","message","config","finalURL","charAt","paramKeys","Object","getOwnPropertyNames","p","replace","queryKeys","cleanedQueries","filter","k","undefined","length","q","slice"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport getConfig from 'next/config';\n\nconst { publicRuntimeConfig } = getConfig();\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\nconst corsBypassURL: string = publicRuntimeConfig.CORS_BYPASS_URL || '';\n\nconst API = {\n  get: async <Response>(internal: boolean, path: string, params?: any, queries?: any, body?: any): Promise<Response | undefined> => {\n    console.log(path);\n    try {\n      const url = generateURL(internal, path, params, queries);\n      console.log(url);\n      // TODO: use middleware approach to enable CORS\n      const response = await axios.get(corsBypassURL + url);\n      // const response = await axios.get(corsBypassURL + baseURL + path);\n      console.log(response);\n      return response.data as Response;\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error(error.response.data);\n        console.error(error.response.status);\n        console.error(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.error(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error', error.message);\n      }\n      console.error(error.config);\n    }\n  }\n};\n\nexport const generateURL = (internal: boolean, path: string, params?: any, queries?: any): string => {\n  let finalURL: string = '';\n  if (internal) {\n    finalURL = path.charAt(0) === baseURL + '/' ? path : baseURL + '/' + path;\n  } else {\n    finalURL = path;\n  }\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter((k: string) => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default API;\n"]},"metadata":{},"sourceType":"module"}