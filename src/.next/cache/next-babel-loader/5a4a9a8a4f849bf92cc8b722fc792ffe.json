{"ast":null,"code":"import axios from 'axios';\nimport useSwr from 'swr';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst baseURL = publicRuntimeConfig.BASE_URL || '';\nconst API = {\n  get: async (path, params, queries, body) => {\n    const fetcher = url => axios.get(url).then(res => res);\n\n    console.log(path);\n    const url = generateURL(path, params, queries);\n    console.log(url); // const response = await axios.get(url);\n    // const response = await axios.get('localhost:3000' + path);\n\n    const {\n      data,\n      error\n    } = useSwr('localhost:3000' + path, fetcher);\n    return data;\n  }\n};\n\nconst generateURL = (path, params, queries) => {\n  let finalURL = path.charAt(0) === '/' ? baseURL + path : baseURL + '/' + path;\n  console.log('1', params);\n\n  if (params) {\n    console.log('2');\n    const paramKeys = Object.getOwnPropertyNames(params);\n\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n\n  console.log('2');\n\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter(k => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  console.log('3');\n  return finalURL.slice(0, -1);\n};\n\nexport default API;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/call.ts"],"names":["axios","useSwr","getConfig","publicRuntimeConfig","baseURL","BASE_URL","API","get","path","params","queries","body","fetcher","url","then","res","console","log","generateURL","data","error","finalURL","charAt","paramKeys","Object","getOwnPropertyNames","p","replace","queryKeys","cleanedQueries","filter","k","undefined","length","q","slice"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;AACA,MAAME,OAAe,GAAGD,mBAAmB,CAACE,QAApB,IAAgC,EAAxD;AAEA,MAAMC,GAAG,GAAG;AACVC,EAAAA,GAAG,EAAE,OAAiBC,IAAjB,EAA+BC,MAA/B,EAA6CC,OAA7C,EAA4DC,IAA5D,KAAyF;AAC5F,UAAMC,OAAO,GAAIC,GAAD,IAASb,KAAK,CAACO,GAAN,CAAUM,GAAV,EAAeC,IAAf,CAAqBC,GAAD,IAASA,GAA7B,CAAzB;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACA,UAAMK,GAAG,GAAGK,WAAW,CAACV,IAAD,EAAOC,MAAP,EAAeC,OAAf,CAAvB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAJ4F,CAK5F;AACA;;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBnB,MAAM,CAAC,mBAAmBO,IAApB,EAA0BI,OAA1B,CAA9B;AACA,WAAOO,IAAP;AACD;AAVS,CAAZ;;AAaA,MAAMD,WAAW,GAAG,CAACV,IAAD,EAAeC,MAAf,EAA6BC,OAA7B,KAAuD;AACzE,MAAIW,QAAQ,GAAGb,IAAI,CAACc,MAAL,CAAY,CAAZ,MAAmB,GAAnB,GAAyBlB,OAAO,GAAGI,IAAnC,GAA0CJ,OAAO,GAAG,GAAV,GAAgBI,IAAzE;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBR,MAAjB;;AACA,MAAIA,MAAJ,EAAY;AACVO,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAMM,SAAS,GAAGC,MAAM,CAACC,mBAAP,CAA2BhB,MAA3B,CAAlB;;AACA,SAAK,MAAMiB,CAAX,IAAgBH,SAAhB,EAA2B;AACzBF,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,OAAT,CAAkB,IAAGD,CAAE,EAAvB,EAA0BjB,MAAM,CAACiB,CAAD,CAAhC,CAAX;AACD;AACF;;AACDV,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,MAAIP,OAAJ,EAAa;AACX,UAAMkB,SAAS,GAAGJ,MAAM,CAACC,mBAAP,CAA2Bf,OAA3B,CAAlB;AACA,UAAMmB,cAAc,GAAGD,SAAS,CAACE,MAAV,CAAkBC,CAAD,IAAe;AACrD,aAAOrB,OAAO,CAACqB,CAAD,CAAP,KAAeC,SAAf,IAA4BtB,OAAO,CAACqB,CAAD,CAAP,KAAe,IAAlD;AACD,KAFsB,CAAvB;;AAIA,QAAI,MAAMF,cAAc,CAACI,MAAzB,EAAiC;AAC/B,aAAOZ,QAAP;AACD;;AAEDA,IAAAA,QAAQ,IAAI,GAAZ;;AACA,SAAK,MAAMa,CAAX,IAAgBL,cAAhB,EAAgC;AAC9BR,MAAAA,QAAQ,IAAK,GAAEa,CAAE,IAAGxB,OAAO,CAACwB,CAAD,CAAI,GAA/B;AACD;AACF;;AACDlB,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,SAAOI,QAAQ,CAACc,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAP;AACD,CA5BD;;AA8BA,eAAe7B,GAAf","sourcesContent":["import axios from 'axios';\nimport useSwr from 'swr';\nimport getConfig from 'next/config';\n\nconst { publicRuntimeConfig } = getConfig();\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\n\nconst API = {\n  get: async <Response>(path: string, params?: any, queries?: any, body?: any): Promise<any> => {\n    const fetcher = (url) => axios.get(url).then((res) => res);\n    console.log(path);\n    const url = generateURL(path, params, queries);\n    console.log(url);\n    // const response = await axios.get(url);\n    // const response = await axios.get('localhost:3000' + path);\n    const { data, error } = useSwr('localhost:3000' + path, fetcher);\n    return data;\n  }\n};\n\nconst generateURL = (path: string, params?: any, queries?: any): string => {\n  let finalURL = path.charAt(0) === '/' ? baseURL + path : baseURL + '/' + path;\n  console.log('1', params);\n  if (params) {\n    console.log('2');\n    const paramKeys = Object.getOwnPropertyNames(params);\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n  console.log('2');\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter((k: string) => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n  console.log('3');\n  return finalURL.slice(0, -1);\n};\n\nexport default API;\n"]},"metadata":{},"sourceType":"module"}