{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jerald/Desktop/nearby-food-web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jerald/Desktop/nearby-food-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport getConfig from 'next/config';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar baseURL = publicRuntimeConfig.BASE_URL || '';\nvar corsBypassURL = publicRuntimeConfig.CORS_BYPASS_URL || '';\nvar API = {\n  get: function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(internal, path, params, queries, body) {\n      var url, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              url = generateURL(internal, path, params, queries);\n              console.log('url in call ', url); // TODO: use middleware approach to enable CORS\n\n              _context.next = 5;\n              return axios.get(url);\n\n            case 5:\n              response = _context.sent;\n              // const response = await axios.get(corsBypassURL + baseURL + path);\n              console.log(response);\n              return _context.abrupt(\"return\", response.data);\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!_context.t0.response) {\n                _context.next = 18;\n                break;\n              }\n\n              throw _context.t0.response.data;\n\n            case 18:\n              if (!_context.t0.request) {\n                _context.next = 22;\n                break;\n              }\n\n              throw _context.t0.request;\n\n            case 22:\n              throw _context.t0.message;\n\n            case 23:\n              throw _context.t0.config;\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    function get(_x, _x2, _x3, _x4, _x5) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n};\nexport var generateURL = function generateURL(internal, path, params, queries) {\n  var finalURL = '';\n\n  if (internal) {\n    finalURL = corsBypassURL + baseURL + path.charAt(0) === '/' ? path : '/' + path;\n  } else {\n    finalURL = path;\n  }\n\n  console.log(internal, finalURL);\n\n  if (params) {\n    var paramKeys = Object.getOwnPropertyNames(params);\n\n    var _iterator = _createForOfIteratorHelper(paramKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var p = _step.value;\n        finalURL = finalURL.replace(\":\".concat(p), params[p]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (queries) {\n    var queryKeys = Object.getOwnPropertyNames(queries);\n    var cleanedQueries = queryKeys.filter(function (k) {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n\n    var _iterator2 = _createForOfIteratorHelper(cleanedQueries),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var q = _step2.value;\n        finalURL += \"\".concat(q, \"=\").concat(queries[q], \"&\");\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\nexport default API;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/call.ts"],"names":["axios","getConfig","publicRuntimeConfig","baseURL","BASE_URL","corsBypassURL","CORS_BYPASS_URL","API","get","internal","path","params","queries","body","url","generateURL","console","log","response","data","request","message","config","finalURL","charAt","paramKeys","Object","getOwnPropertyNames","p","replace","queryKeys","cleanedQueries","filter","k","undefined","length","q","slice"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport getConfig from 'next/config';\n\nconst { publicRuntimeConfig } = getConfig();\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\nconst corsBypassURL: string = publicRuntimeConfig.CORS_BYPASS_URL || '';\n\nconst API = {\n  get: async <Response>(internal: boolean, path: string, params?: any, queries?: any, body?: any): Promise<Response | undefined> => {\n    try {\n      const url = generateURL(internal, path, params, queries);\n      console.log('url in call ', url);\n      // TODO: use middleware approach to enable CORS\n      const response = await axios.get(url);\n      // const response = await axios.get(corsBypassURL + baseURL + path);\n      console.log(response);\n      return response.data as Response;\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        throw error.response.data;\n        throw error.response.status;\n        throw error.response.headers;\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        throw error.request;\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        throw error.message;\n      }\n      throw error.config;\n    }\n  }\n};\n\nexport const generateURL = (internal: boolean, path: string, params?: any, queries?: any): string => {\n  let finalURL: string = '';\n  if (internal) {\n    finalURL = corsBypassURL + baseURL + path.charAt(0) === '/' ? path : '/' + path;\n  } else {\n    finalURL = path;\n  }\n  console.log(internal, finalURL);\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter((k: string) => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default API;\n"]},"metadata":{},"sourceType":"module"}