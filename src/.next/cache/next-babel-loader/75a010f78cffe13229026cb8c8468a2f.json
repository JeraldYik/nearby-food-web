{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jerald/Desktop/nearby-food-web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jerald/Desktop/nearby-food-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport getConfig from 'next/config';\nimport axios from 'axios';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar GOOGLE_APIKEY = publicRuntimeConfig.BGOOGLE_APIKEY || '';\nvar baseURL = publicRuntimeConfig.BASE_URL || '';\n\nvar getLatLngFromAddress = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(queries) {\n    var url, geocodeURI, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // const params = new contracts.GetLatLngFromAddress.Params();\n            // const queries = new contracts.GetLatLngFromAddress.Queries();\n            // const body = new contracts.GetLatLngFromAddress.Body();\n            // queries.address = `${p.address} Singapore`;\n            // queries.key = apiKey;\n            // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n            // return await axios.get('http://localhost:3000/api/googleConsole');\n            // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n            url = 'https://maps.googleapis.com/maps/api/geocode/json';\n            geocodeURI = generateURL(url, queries);\n            _context.prev = 2;\n            _context.next = 5;\n            return axios.get(geocodeURI);\n\n          case 5:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (_context.t0.response) {\n              // The request was made and the server responded with a status code\n              // that falls out of the range of 2xx\n              console.error(_context.t0.response.data);\n              console.error(_context.t0.response.status);\n              console.error(_context.t0.response.headers);\n            } else if (_context.t0.request) {\n              // The request was made but no response was received\n              // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n              // http.ClientRequest in node.js\n              console.error(_context.t0.request);\n            } else {\n              // Something happened in setting up the request that triggered an Error\n              console.error('Error', _context.t0.message);\n            }\n\n            console.error(_context.t0.config);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n\n  return function getLatLngFromAddress(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar GoogleConsoleAPI = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(queries) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getLatLngFromAddress(queries);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function GoogleConsoleAPI(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n_c = GoogleConsoleAPI;\n\nvar generateURL = function generateURL(url, params, queries) {\n  var finalURL = url;\n\n  if (params) {\n    var paramKeys = Object.getOwnPropertyNames(params);\n\n    var _iterator = _createForOfIteratorHelper(paramKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var p = _step.value;\n        finalURL = finalURL.replace(\":\".concat(p), params[p]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (queries) {\n    var queryKeys = Object.getOwnPropertyNames(queries);\n    var cleanedQueries = queryKeys.filter(function (k) {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n\n    var _iterator2 = _createForOfIteratorHelper(cleanedQueries),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var q = _step2.value;\n        finalURL += \"\".concat(q, \"=\").concat(queries[q], \"&\");\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default GoogleConsoleAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleConsoleAPI\");","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/googleConsole/googleConsoleAPI.ts"],"names":["getConfig","axios","publicRuntimeConfig","GOOGLE_APIKEY","BGOOGLE_APIKEY","baseURL","BASE_URL","getLatLngFromAddress","queries","url","geocodeURI","generateURL","get","response","data","console","error","status","headers","request","message","config","GoogleConsoleAPI","params","finalURL","paramKeys","Object","getOwnPropertyNames","p","replace","queryKeys","cleanedQueries","filter","k","undefined","length","q","slice"],"mappings":"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","sourcesContent":["import API from 'lib/api/client.contract';\nimport getConfig from 'next/config';\nimport { ILatlng } from 'components/specific/addressField';\nimport { EateryTypes } from 'stores';\nimport axios from 'axios';\n\nexport interface IGetLatLngFromAddress {\n  address: string;\n}\n\nexport interface IGetResultsFromLatlng {\n  latlng: ILatlng;\n  type: EateryTypes;\n  rating: number;\n  minPrice: number;\n  maxPrice: number;\n  radius: number;\n}\n\nconst { publicRuntimeConfig } = getConfig();\nconst GOOGLE_APIKEY: string = publicRuntimeConfig.BGOOGLE_APIKEY || '';\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async (queries: IGetLatLngFromAddress): Promise<any> => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  const url = 'https://maps.googleapis.com/maps/api/geocode/json';\n  const geocodeURI = generateURL(url, queries);\n  try {\n    const response = await axios.get(geocodeURI);\n    return response.data as Response;\n  } catch (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.error(error.response.data);\n      console.error(error.response.status);\n      console.error(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.error(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('Error', error.message);\n    }\n    console.error(error.config);\n  }\n};\n\nconst GoogleConsoleAPI = async (queries: IGetLatLngFromAddress) => {\n  return await getLatLngFromAddress(queries);\n};\n\nconst generateURL = (url: string, params?: any, queries?: any): string => {\n  let finalURL = url;\n\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter((k: string) => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default GoogleConsoleAPI;\n"]},"metadata":{},"sourceType":"module"}