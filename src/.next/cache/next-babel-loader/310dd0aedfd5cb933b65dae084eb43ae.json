{"ast":null,"code":"// import { NextApiRequest, NextApiResponse } from 'next';\n// import runMiddlewares from 'lib/api/middlewares';\nimport cors from 'cors'; // export default async (req: NextApiRequest, res: NextApiResponse) => {\n//   // if (req.method === 'GET') {\n//   //   const apiKey: string = process.env.GOOGLE_APIKEY || '';\n//   //   const address = '577047';\n//   //   /** DOCUMENTATION\n//   //    *  https://developers.google.com/maps/documentation/geocoding/overview\n//   //    */\n//   //   const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n//   //   try {\n//   //     const response = await axios.get(geocodeURI);\n//   //     if (response.status === 200) {\n//   //       if (response.data.status === 'OK') {\n//   //         console.log(response.data);\n//   //         res.statusCode = 200;\n//   //         res.setHeader('Content-Type', 'application/json');\n//   //         res.end(JSON.stringify(response.data));\n//   //       } else {\n//   //         console.log(`Error! ${response.data.status}`);\n//   //       }\n//   //     } else {\n//   //       console.log('There is an Error!\\nReponse Code: ' + response.status.toString());\n//   //     }\n//   //   } catch (err) {\n//   //     console.log('There is an error! Please try again.\\n' + err.toString());\n//   //   }\n//   // } else {\n//   //   throw new Error('Methods other than GET not allowed!');\n//   // }\n//   console.log('in api');\n//   // Initialize the cors middleware\n//   const cors = initMiddleware(\n//     // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n//     Cors()\n//   );\n//   // // Run cors\n//   await cors(req, res);\n//   // // Rest of the API logic\n//   res.json({ message: 'Hello Everyone!' });\n//   // await runMiddlewares(req, res);\n//   // res.statusCode = 200;\n//   // res.json({ hello: 'world' });\n// };\n// function initMiddleware(middleware) {\n//   return (req, res) =>\n//     new Promise((resolve, reject) => {\n//       middleware(req, res, (result) => {\n//         if (result instanceof Error) {\n//           return reject(result);\n//         }\n//         return resolve(result);\n//       });\n//     });\n// }\n\nimport nextConnect from 'next-connect';\nimport API from 'lib/api/call';\n\nconst testMiddleware = (req, res, next) => {\n  cors(req, res, result => {\n    console.log(result);\n  });\n  console.log('middleware');\n  next();\n};\n\nconst handler = nextConnect() // .use(testMiddleware)\n.get(async (req, res) => {\n  console.log(req.query);\n  const baseURL = 'https://maps.googleapis.com/maps/api/geocode/json';\n  const response = await API.get(false, baseURL, null, req.query, null);\n  res.send(response);\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/pages/api/googleConsole.ts"],"names":["cors","nextConnect","API","testMiddleware","req","res","next","result","console","log","handler","get","query","baseURL","response","send"],"mappings":"AAAA;AACA;AAEA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,MAAMC,cAAc,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACzCN,EAAAA,IAAI,CAACI,GAAD,EAAMC,GAAN,EAAYE,MAAD,IAAY;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GAFG,CAAJ;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAH,EAAAA,IAAI;AACL,CAND;;AAQA,MAAMI,OAAO,GAAGT,WAAW,GACzB;AADyB,CAExBU,GAFa,CAGZ,OAAOP,GAAP,EAA4BC,GAA5B,KAA+E;AAC7EG,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACQ,KAAhB;AACA,QAAMC,OAAO,GAAG,mDAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMZ,GAAG,CAACS,GAAJ,CAAQ,KAAR,EAAeE,OAAf,EAAwB,IAAxB,EAA8BT,GAAG,CAACQ,KAAlC,EAAyC,IAAzC,CAAvB;AACAP,EAAAA,GAAG,CAACU,IAAJ,CAASD,QAAT;AACD,CARW,CAAhB;AAWA,eAAeJ,OAAf","sourcesContent":["// import { NextApiRequest, NextApiResponse } from 'next';\n// import runMiddlewares from 'lib/api/middlewares';\n\nimport cors from 'cors';\n\n// export default async (req: NextApiRequest, res: NextApiResponse) => {\n//   // if (req.method === 'GET') {\n//   //   const apiKey: string = process.env.GOOGLE_APIKEY || '';\n//   //   const address = '577047';\n\n//   //   /** DOCUMENTATION\n//   //    *  https://developers.google.com/maps/documentation/geocoding/overview\n//   //    */\n//   //   const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n\n//   //   try {\n//   //     const response = await axios.get(geocodeURI);\n//   //     if (response.status === 200) {\n//   //       if (response.data.status === 'OK') {\n//   //         console.log(response.data);\n//   //         res.statusCode = 200;\n//   //         res.setHeader('Content-Type', 'application/json');\n//   //         res.end(JSON.stringify(response.data));\n//   //       } else {\n//   //         console.log(`Error! ${response.data.status}`);\n//   //       }\n//   //     } else {\n//   //       console.log('There is an Error!\\nReponse Code: ' + response.status.toString());\n//   //     }\n//   //   } catch (err) {\n//   //     console.log('There is an error! Please try again.\\n' + err.toString());\n//   //   }\n//   // } else {\n//   //   throw new Error('Methods other than GET not allowed!');\n//   // }\n//   console.log('in api');\n\n//   // Initialize the cors middleware\n//   const cors = initMiddleware(\n//     // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n//     Cors()\n//   );\n\n//   // // Run cors\n//   await cors(req, res);\n\n//   // // Rest of the API logic\n//   res.json({ message: 'Hello Everyone!' });\n\n//   // await runMiddlewares(req, res);\n//   // res.statusCode = 200;\n//   // res.json({ hello: 'world' });\n// };\n\n// function initMiddleware(middleware) {\n//   return (req, res) =>\n//     new Promise((resolve, reject) => {\n//       middleware(req, res, (result) => {\n//         if (result instanceof Error) {\n//           return reject(result);\n//         }\n//         return resolve(result);\n//       });\n//     });\n// }\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport nextConnect from 'next-connect';\nimport API from 'lib/api/call';\n\nconst testMiddleware = (req, res, next) => {\n  cors(req, res, (result) => {\n    console.log(result);\n  });\n  console.log('middleware');\n  next();\n};\n\nconst handler = nextConnect()\n  // .use(testMiddleware)\n  .get(\n    async (req: NextApiRequest, res: NextApiResponse): Promise<Response | void> => {\n      console.log(req.query);\n      const baseURL = 'https://maps.googleapis.com/maps/api/geocode/json';\n      const response = await API.get(false, baseURL, null, req.query, null);\n      res.send(response);\n    }\n  );\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}