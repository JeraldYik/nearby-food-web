{"ast":null,"code":"import API from 'lib/api/call';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst GOOGLE_APIKEY = publicRuntimeConfig.BGOOGLE_APIKEY || '';\nconst baseURL = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async queries => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  console.log('in here');\n  const response = await API.get('/api/googleConsole', null, queries, null);\n};\n\nconst GoogleConsoleAPI = async queries => {\n  return await getLatLngFromAddress(queries);\n};\n\nconst generateURL = (url, params, queries) => {\n  let finalURL = url;\n\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter(k => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default GoogleConsoleAPI;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/googleConsole/googleConsoleAPI.ts"],"names":["API","getConfig","publicRuntimeConfig","GOOGLE_APIKEY","BGOOGLE_APIKEY","baseURL","BASE_URL","getLatLngFromAddress","queries","console","log","response","get","GoogleConsoleAPI","generateURL","url","params","finalURL","paramKeys","Object","getOwnPropertyNames","p","replace","queryKeys","cleanedQueries","filter","k","undefined","length","q","slice"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAkBA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;AACA,MAAME,aAAqB,GAAGD,mBAAmB,CAACE,cAApB,IAAsC,EAApE;AACA,MAAMC,OAAe,GAAGH,mBAAmB,CAACI,QAApB,IAAgC,EAAxD;;AAEA,MAAMC,oBAAoB,GAAG,MAAOC,OAAP,IAAwD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQ,oBAAR,EAA8B,IAA9B,EAAoCJ,OAApC,EAA6C,IAA7C,CAAvB;AACD,CAXD;;AAaA,MAAMK,gBAAgB,GAAG,MAAOL,OAAP,IAA0C;AACjE,SAAO,MAAMD,oBAAoB,CAACC,OAAD,CAAjC;AACD,CAFD;;AAIA,MAAMM,WAAW,GAAG,CAACC,GAAD,EAAcC,MAAd,EAA4BR,OAA5B,KAAsD;AACxE,MAAIS,QAAQ,GAAGF,GAAf;;AAEA,MAAIC,MAAJ,EAAY;AACV,UAAME,SAAS,GAAGC,MAAM,CAACC,mBAAP,CAA2BJ,MAA3B,CAAlB;;AACA,SAAK,MAAMK,CAAX,IAAgBH,SAAhB,EAA2B;AACzBD,MAAAA,QAAQ,GAAGA,QAAQ,CAACK,OAAT,CAAkB,IAAGD,CAAE,EAAvB,EAA0BL,MAAM,CAACK,CAAD,CAAhC,CAAX;AACD;AACF;;AAED,MAAIb,OAAJ,EAAa;AACX,UAAMe,SAAS,GAAGJ,MAAM,CAACC,mBAAP,CAA2BZ,OAA3B,CAAlB;AACA,UAAMgB,cAAc,GAAGD,SAAS,CAACE,MAAV,CAAkBC,CAAD,IAAe;AACrD,aAAOlB,OAAO,CAACkB,CAAD,CAAP,KAAeC,SAAf,IAA4BnB,OAAO,CAACkB,CAAD,CAAP,KAAe,IAAlD;AACD,KAFsB,CAAvB;;AAIA,QAAI,MAAMF,cAAc,CAACI,MAAzB,EAAiC;AAC/B,aAAOX,QAAP;AACD;;AAEDA,IAAAA,QAAQ,IAAI,GAAZ;;AACA,SAAK,MAAMY,CAAX,IAAgBL,cAAhB,EAAgC;AAC9BP,MAAAA,QAAQ,IAAK,GAAEY,CAAE,IAAGrB,OAAO,CAACqB,CAAD,CAAI,GAA/B;AACD;AACF;;AAED,SAAOZ,QAAQ,CAACa,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAP;AACD,CA3BD;;AA6BA,eAAejB,gBAAf","sourcesContent":["import API from 'lib/api/call';\nimport getConfig from 'next/config';\nimport { ILatlng } from 'components/specific/addressField';\nimport { EateryTypes } from 'stores';\nimport axios from 'axios';\n\nexport interface IGetLatLngFromAddress {\n  address: string;\n}\n\nexport interface IGetResultsFromLatlng {\n  latlng: ILatlng;\n  type: EateryTypes;\n  rating: number;\n  minPrice: number;\n  maxPrice: number;\n  radius: number;\n}\n\nconst { publicRuntimeConfig } = getConfig();\nconst GOOGLE_APIKEY: string = publicRuntimeConfig.BGOOGLE_APIKEY || '';\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async (queries: IGetLatLngFromAddress): Promise<any> => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  console.log('in here');\n  const response = await API.get('/api/googleConsole', null, queries, null);\n};\n\nconst GoogleConsoleAPI = async (queries: IGetLatLngFromAddress) => {\n  return await getLatLngFromAddress(queries);\n};\n\nconst generateURL = (url: string, params?: any, queries?: any): string => {\n  let finalURL = url;\n\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter((k: string) => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default GoogleConsoleAPI;\n"]},"metadata":{},"sourceType":"module"}