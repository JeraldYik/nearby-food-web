{"ast":null,"code":"import Cors from 'cors'; // Initializing the cors middleware\n\nconst cors = Cors({\n  methods: ['GET', 'HEAD']\n});\n\nconst runMiddlewares = async (req, res) => {\n  // Run the middleware\n  console.log('in middleware');\n  await initMiddleware(req, res, cors);\n}; // Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\n\n\nconst initMiddleware = async (req, res, fn) => {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\nexport default runMiddlewares;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/middlewares.ts"],"names":["Cors","cors","methods","runMiddlewares","req","res","console","log","initMiddleware","fn","Promise","resolve","reject","result","Error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEA;;AACA,MAAMC,IAAI,GAAGD,IAAI,CAAC;AAChBE,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR;AADO,CAAD,CAAjB;;AAIA,MAAMC,cAAc,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACzC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMC,cAAc,CAACJ,GAAD,EAAMC,GAAN,EAAWJ,IAAX,CAApB;AACD,CAJD,C,CAMA;AACA;;;AACA,MAAMO,cAAc,GAAG,OAAOJ,GAAP,EAAYC,GAAZ,EAAiBI,EAAjB,KAAwB;AAC7C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,EAAE,CAACL,GAAD,EAAMC,GAAN,EAAYQ,MAAD,IAAY;AACvB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASD,CAVD;;AAYA,eAAeV,cAAf","sourcesContent":["import Cors from 'cors';\n\n// Initializing the cors middleware\nconst cors = Cors({\n  methods: ['GET', 'HEAD']\n});\n\nconst runMiddlewares = async (req, res) => {\n  // Run the middleware\n  console.log('in middleware');\n  await initMiddleware(req, res, cors);\n};\n\n// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nconst initMiddleware = async (req, res, fn) => {\n  return new Promise((resolve, reject) => {\n    fn(req, res, (result) => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n};\n\nexport default runMiddlewares;\n"]},"metadata":{},"sourceType":"module"}