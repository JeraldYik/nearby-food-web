{"ast":null,"code":"import axios from 'axios';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst baseURL = publicRuntimeConfig.BASE_URL || '';\nconst API = {\n  get: async (path, params, queries, body) => {\n    console.log(path);\n\n    try {\n      const url = generateURL(path, params, queries);\n      console.log(url);\n      console.log(urlBuilder(url));\n      const response = await axios.get(urlBuilder(url));\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error(error.response.data);\n        console.error(error.response.status);\n        console.error(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.error(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error', error.message);\n      }\n\n      console.error(error.config);\n    }\n  }\n};\n\nconst generateURL = (path, params, queries) => {\n  let finalPath = path;\n  const paramKeys = Object.getOwnPropertyNames(params);\n\n  for (const p of paramKeys) {\n    finalPath = finalPath.replace(`:${p}`, params[p]);\n  }\n\n  const queryKeys = Object.getOwnPropertyNames(queries);\n  const cleanedQueries = queryKeys.filter(k => {\n    return queries[k] !== undefined && queries[k] !== null;\n  });\n\n  if (0 === cleanedQueries.length) {\n    return finalPath;\n  }\n\n  finalPath += '?';\n\n  for (const q of cleanedQueries) {\n    finalPath += `${q}=${queries[q]}&`;\n  }\n\n  return finalPath.slice(0, -1);\n};\n\nconst urlBuilder = path => {\n  if (path.charAt(0) === '/') {\n    return baseURL + path;\n  }\n\n  return baseURL + '/' + path;\n};\n\nexport default API;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/call.ts"],"names":["axios","getConfig","publicRuntimeConfig","baseURL","BASE_URL","API","get","path","params","queries","body","console","log","url","generateURL","urlBuilder","response","data","error","status","headers","request","message","config","finalPath","paramKeys","Object","getOwnPropertyNames","p","replace","queryKeys","cleanedQueries","filter","k","undefined","length","q","slice","charAt"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport getConfig from 'next/config';\n\nconst { publicRuntimeConfig } = getConfig();\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\n\nconst API = {\n  get: async <Response>(path: string, params?: any, queries?: any, body?: any): Promise<Response | undefined> => {\n    console.log(path);\n    try {\n      const url = generateURL(path, params, queries);\n      console.log(url);\n      console.log(urlBuilder(url));\n      const response = await axios.get(urlBuilder(url));\n      return response.data as Response;\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.error(error.response.data);\n        console.error(error.response.status);\n        console.error(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.error(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error('Error', error.message);\n      }\n      console.error(error.config);\n    }\n  }\n};\n\nconst generateURL = (path: string, params: any, queries: any): string => {\n  let finalPath = path;\n\n  const paramKeys = Object.getOwnPropertyNames(params);\n  for (const p of paramKeys) {\n    finalPath = finalPath.replace(`:${p}`, params[p]);\n  }\n\n  const queryKeys = Object.getOwnPropertyNames(queries);\n  const cleanedQueries = queryKeys.filter((k: string) => {\n    return queries[k] !== undefined && queries[k] !== null;\n  });\n\n  if (0 === cleanedQueries.length) {\n    return finalPath;\n  }\n\n  finalPath += '?';\n  for (const q of cleanedQueries) {\n    finalPath += `${q}=${queries[q]}&`;\n  }\n  return finalPath.slice(0, -1);\n};\n\nconst urlBuilder = (path: string): string => {\n  if (path.charAt(0) === '/') {\n    return baseURL + path;\n  }\n  return baseURL + '/' + path;\n};\n\nexport default API;\n"]},"metadata":{},"sourceType":"module"}