{"ast":null,"code":"import getConfig from 'next/config';\nimport axios from 'axios';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst GOOGLE_APIKEY = publicRuntimeConfig.BGOOGLE_APIKEY || '';\nconst baseURL = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async queries => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  const url = 'https://maps.googleapis.com/maps/api/geocode/json';\n  const geocodeURI = generateURL(url, queries);\n\n  try {\n    const response = await axios.get(geocodeURI);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.error(error.response.data);\n      console.error(error.response.status);\n      console.error(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.error(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('Error', error.message);\n    }\n\n    console.error(error.config);\n  }\n};\n\nconst GoogleConsoleAPI = async queries => {\n  return await getLatLngFromAddress(queries);\n};\n\nconst generateURL = (url, params, queries) => {\n  let finalURL = url;\n\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter(k => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default GoogleConsoleAPI;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/googleConsole/googleConsoleAPI.ts"],"names":["getConfig","axios","publicRuntimeConfig","GOOGLE_APIKEY","BGOOGLE_APIKEY","baseURL","BASE_URL","getLatLngFromAddress","queries","url","geocodeURI","generateURL","response","get","data","error","console","status","headers","request","message","config","GoogleConsoleAPI","params","finalURL","paramKeys","Object","getOwnPropertyNames","p","replace","queryKeys","cleanedQueries","filter","k","undefined","length","q","slice"],"mappings":"AACA,OAAOA,SAAP,MAAsB,aAAtB;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AAeA,MAAM;AAAEC,EAAAA;AAAF,IAA0BF,SAAS,EAAzC;AACA,MAAMG,aAAqB,GAAGD,mBAAmB,CAACE,cAApB,IAAsC,EAApE;AACA,MAAMC,OAAe,GAAGH,mBAAmB,CAACI,QAApB,IAAgC,EAAxD;;AAEA,MAAMC,oBAAoB,GAAG,MAAOC,OAAP,IAAwD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,GAAG,GAAG,mDAAZ;AACA,QAAMC,UAAU,GAAGC,WAAW,CAACF,GAAD,EAAMD,OAAN,CAA9B;;AACA,MAAI;AACF,UAAMI,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUH,UAAV,CAAvB;AACA,WAAOE,QAAQ,CAACE,IAAhB;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,QAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB;AACA;AACAI,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACH,QAAN,CAAeE,IAA7B;AACAE,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACH,QAAN,CAAeK,MAA7B;AACAD,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACH,QAAN,CAAeM,OAA7B;AACD,KAND,MAMO,IAAIH,KAAK,CAACI,OAAV,EAAmB;AACxB;AACA;AACA;AACAH,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACI,OAApB;AACD,KALM,MAKA;AACL;AACAH,MAAAA,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAK,CAACK,OAA7B;AACD;;AACDJ,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACM,MAApB;AACD;AACF,CAhCD;;AAkCA,MAAMC,gBAAgB,GAAG,MAAOd,OAAP,IAA0C;AACjE,SAAO,MAAMD,oBAAoB,CAACC,OAAD,CAAjC;AACD,CAFD;;AAIA,MAAMG,WAAW,GAAG,CAACF,GAAD,EAAcc,MAAd,EAA4Bf,OAA5B,KAAsD;AACxE,MAAIgB,QAAQ,GAAGf,GAAf;;AAEA,MAAIc,MAAJ,EAAY;AACV,UAAME,SAAS,GAAGC,MAAM,CAACC,mBAAP,CAA2BJ,MAA3B,CAAlB;;AACA,SAAK,MAAMK,CAAX,IAAgBH,SAAhB,EAA2B;AACzBD,MAAAA,QAAQ,GAAGA,QAAQ,CAACK,OAAT,CAAkB,IAAGD,CAAE,EAAvB,EAA0BL,MAAM,CAACK,CAAD,CAAhC,CAAX;AACD;AACF;;AAED,MAAIpB,OAAJ,EAAa;AACX,UAAMsB,SAAS,GAAGJ,MAAM,CAACC,mBAAP,CAA2BnB,OAA3B,CAAlB;AACA,UAAMuB,cAAc,GAAGD,SAAS,CAACE,MAAV,CAAkBC,CAAD,IAAe;AACrD,aAAOzB,OAAO,CAACyB,CAAD,CAAP,KAAeC,SAAf,IAA4B1B,OAAO,CAACyB,CAAD,CAAP,KAAe,IAAlD;AACD,KAFsB,CAAvB;;AAIA,QAAI,MAAMF,cAAc,CAACI,MAAzB,EAAiC;AAC/B,aAAOX,QAAP;AACD;;AAEDA,IAAAA,QAAQ,IAAI,GAAZ;;AACA,SAAK,MAAMY,CAAX,IAAgBL,cAAhB,EAAgC;AAC9BP,MAAAA,QAAQ,IAAK,GAAEY,CAAE,IAAG5B,OAAO,CAAC4B,CAAD,CAAI,GAA/B;AACD;AACF;;AAED,SAAOZ,QAAQ,CAACa,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAP;AACD,CA3BD;;AA6BA,eAAef,gBAAf","sourcesContent":["import API from 'lib/api/client.contract';\nimport getConfig from 'next/config';\nimport { ILatlng } from 'components/specific/addressField';\nimport { EateryTypes } from 'stores';\nimport axios from 'axios';\n\nexport interface IGetLatLngFromAddress {\n  address: string;\n}\n\nexport interface IGetResultsFromLatlng {\n  latlng: ILatlng;\n  type: EateryTypes;\n  rating: number;\n  minPrice: number;\n  maxPrice: number;\n  radius: number;\n}\n\nconst { publicRuntimeConfig } = getConfig();\nconst GOOGLE_APIKEY: string = publicRuntimeConfig.BGOOGLE_APIKEY || '';\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async (queries: IGetLatLngFromAddress): Promise<any> => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  const url = 'https://maps.googleapis.com/maps/api/geocode/json';\n  const geocodeURI = generateURL(url, queries);\n  try {\n    const response = await axios.get(geocodeURI);\n    return response.data as Response;\n  } catch (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.error(error.response.data);\n      console.error(error.response.status);\n      console.error(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.error(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error('Error', error.message);\n    }\n    console.error(error.config);\n  }\n};\n\nconst GoogleConsoleAPI = async (queries: IGetLatLngFromAddress) => {\n  return await getLatLngFromAddress(queries);\n};\n\nconst generateURL = (url: string, params?: any, queries?: any): string => {\n  let finalURL = url;\n\n  if (params) {\n    const paramKeys = Object.getOwnPropertyNames(params);\n    for (const p of paramKeys) {\n      finalURL = finalURL.replace(`:${p}`, params[p]);\n    }\n  }\n\n  if (queries) {\n    const queryKeys = Object.getOwnPropertyNames(queries);\n    const cleanedQueries = queryKeys.filter((k: string) => {\n      return queries[k] !== undefined && queries[k] !== null;\n    });\n\n    if (0 === cleanedQueries.length) {\n      return finalURL;\n    }\n\n    finalURL += '?';\n    for (const q of cleanedQueries) {\n      finalURL += `${q}=${queries[q]}&`;\n    }\n  }\n\n  return finalURL.slice(0, -1);\n};\n\nexport default GoogleConsoleAPI;\n"]},"metadata":{},"sourceType":"module"}