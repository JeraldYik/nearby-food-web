{"ast":null,"code":"import API from 'lib/api/call';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst GOOGLE_APIKEY = publicRuntimeConfig.GOOGLE_APIKEY || '';\nconst baseURL = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async queries => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  queries['address'] += ' Singapore';\n  queries['key'] = GOOGLE_APIKEY;\n  const response = await API.get(true, '/api/googleConsole', null, queries, null); // TODO: to resolve\n\n  const latlng = {\n    lat: response.results[0].geometry.location.lat,\n    lng: response.results[0].geometry.location.lng\n  };\n  return latlng;\n};\n\nconst GoogleConsoleAPI = async queries => {\n  const latlng = await getLatLngFromAddress(queries);\n  return latlng;\n};\n\nexport default GoogleConsoleAPI;","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/googleConsole/googleConsoleAPI.ts"],"names":["API","getConfig","publicRuntimeConfig","GOOGLE_APIKEY","baseURL","BASE_URL","getLatLngFromAddress","queries","response","get","latlng","lat","results","geometry","location","lng","GoogleConsoleAPI"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAsBA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;AACA,MAAME,aAAqB,GAAGD,mBAAmB,CAACC,aAApB,IAAqC,EAAnE;AACA,MAAMC,OAAe,GAAGF,mBAAmB,CAACG,QAApB,IAAgC,EAAxD;;AAEA,MAAMC,oBAAoB,GAAG,MAAOC,OAAP,IAAwD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAAA,OAAO,CAAC,SAAD,CAAP,IAAsB,YAAtB;AACAA,EAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBJ,aAAjB;AACA,QAAMK,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAJ,CAAQ,IAAR,EAAc,oBAAd,EAAoC,IAApC,EAA0CF,OAA1C,EAAmD,IAAnD,CAAvB,CAXmF,CAYnF;;AACA,QAAMG,MAAe,GAAG;AACtBC,IAAAA,GAAG,EAAEH,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAA7B,CAAsCH,GADrB;AAEtBI,IAAAA,GAAG,EAAEP,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAA7B,CAAsCC;AAFrB,GAAxB;AAIA,SAAOL,MAAP;AACD,CAlBD;;AAoBA,MAAMM,gBAAgB,GAAG,MAAOT,OAAP,IAA0C;AACjE,QAAMG,MAAM,GAAG,MAAMJ,oBAAoB,CAACC,OAAD,CAAzC;AACA,SAAOG,MAAP;AACD,CAHD;;AAKA,eAAeM,gBAAf","sourcesContent":["import API from 'lib/api/call';\nimport getConfig from 'next/config';\nimport { EateryTypes } from 'stores';\nimport axios from 'axios';\n\nexport interface ILatlng {\n  lat: string;\n  lng: string;\n}\n\nexport interface IGetLatLngFromAddress {\n  address: string;\n}\n\nexport interface IGetResultsFromLatlng {\n  latlng: ILatlng;\n  type: EateryTypes;\n  rating: number;\n  minPrice: number;\n  maxPrice: number;\n  radius: number;\n}\n\nconst { publicRuntimeConfig } = getConfig();\nconst GOOGLE_APIKEY: string = publicRuntimeConfig.GOOGLE_APIKEY || '';\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async (queries: IGetLatLngFromAddress): Promise<any> => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  queries['address'] += ' Singapore';\n  queries['key'] = GOOGLE_APIKEY;\n  const response = await API.get(true, '/api/googleConsole', null, queries, null);\n  // TODO: to resolve\n  const latlng: ILatlng = {\n    lat: response.results[0].geometry.location.lat,\n    lng: response.results[0].geometry.location.lng\n  };\n  return latlng;\n};\n\nconst GoogleConsoleAPI = async (queries: IGetLatLngFromAddress) => {\n  const latlng = await getLatLngFromAddress(queries);\n  return latlng;\n};\n\nexport default GoogleConsoleAPI;\n"]},"metadata":{},"sourceType":"module"}