{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jerald/Desktop/nearby-food-web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/jerald/Desktop/nearby-food-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport API from 'lib/api/call';\nimport getConfig from 'next/config';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar GOOGLE_APIKEY = publicRuntimeConfig.GOOGLE_APIKEY || '';\nvar baseURL = publicRuntimeConfig.BASE_URL || '';\n\nvar getLatLngFromAddress = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(queries) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // const params = new contracts.GetLatLngFromAddress.Params();\n            // const queries = new contracts.GetLatLngFromAddress.Queries();\n            // const body = new contracts.GetLatLngFromAddress.Body();\n            // queries.address = `${p.address} Singapore`;\n            // queries.key = apiKey;\n            // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n            // return await axios.get('http://localhost:3000/api/googleConsole');\n            // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n            queries['address'] += ' Singapore';\n            queries['key'] = GOOGLE_APIKEY;\n            _context.next = 4;\n            return API.get(true, '/api/googleConsole', null, queries, null);\n\n          case 4:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getLatLngFromAddress(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar GoogleConsoleAPI = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(queries) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getLatLngFromAddress(queries);\n\n          case 2:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function GoogleConsoleAPI(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n_c = GoogleConsoleAPI;\nexport default GoogleConsoleAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleConsoleAPI\");","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/lib/api/googleConsole/googleConsoleAPI.ts"],"names":["API","getConfig","publicRuntimeConfig","GOOGLE_APIKEY","baseURL","BASE_URL","getLatLngFromAddress","queries","get","response","GoogleConsoleAPI"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;iBAkBgCA,SAAS,E;IAAjCC,mB,cAAAA,mB;;AACR,IAAMC,aAAqB,GAAGD,mBAAmB,CAACC,aAApB,IAAqC,EAAnE;AACA,IAAMC,OAAe,GAAGF,mBAAmB,CAACG,QAApB,IAAgC,EAAxD;;AAEA,IAAMC,oBAAoB;AAAA,sEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,YAAAA,OAAO,CAAC,SAAD,CAAP,IAAsB,YAAtB;AACAA,YAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBJ,aAAjB;AAV2B;AAAA,mBAWJH,GAAG,CAACQ,GAAJ,CAAQ,IAAR,EAAc,oBAAd,EAAoC,IAApC,EAA0CD,OAA1C,EAAmD,IAAnD,CAXI;;AAAA;AAWrBE,YAAAA,QAXqB;AAAA,6CAYpBA,QAZoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBH,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAeA,IAAMI,gBAAgB;AAAA,uEAAG,kBAAOH,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAD,oBAAoB,CAACC,OAAD,CADpB;;AAAA;AACjBE,YAAAA,QADiB;AAAA,8CAEhBA,QAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBC,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;KAAMA,gB;AAKN,eAAeA,gBAAf","sourcesContent":["import API from 'lib/api/call';\nimport getConfig from 'next/config';\nimport { ILatlng } from 'components/specific/addressField';\nimport { EateryTypes } from 'stores';\nimport axios from 'axios';\n\nexport interface IGetLatLngFromAddress {\n  address: string;\n}\n\nexport interface IGetResultsFromLatlng {\n  latlng: ILatlng;\n  type: EateryTypes;\n  rating: number;\n  minPrice: number;\n  maxPrice: number;\n  radius: number;\n}\n\nconst { publicRuntimeConfig } = getConfig();\nconst GOOGLE_APIKEY: string = publicRuntimeConfig.GOOGLE_APIKEY || '';\nconst baseURL: string = publicRuntimeConfig.BASE_URL || '';\n\nconst getLatLngFromAddress = async (queries: IGetLatLngFromAddress): Promise<any> => {\n  // const params = new contracts.GetLatLngFromAddress.Params();\n  // const queries = new contracts.GetLatLngFromAddress.Queries();\n  // const body = new contracts.GetLatLngFromAddress.Body();\n  // queries.address = `${p.address} Singapore`;\n  // queries.key = apiKey;\n  // const response = await API.call<contracts.GetLatLngFromAddress.Response>(req);\n  // return await axios.get('http://localhost:3000/api/googleConsole');\n  // const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  queries['address'] += ' Singapore';\n  queries['key'] = GOOGLE_APIKEY;\n  const response = await API.get(true, '/api/googleConsole', null, queries, null);\n  return response;\n};\n\nconst GoogleConsoleAPI = async (queries: IGetLatLngFromAddress) => {\n  const response = await getLatLngFromAddress(queries);\n  return response;\n};\n\nexport default GoogleConsoleAPI;\n"]},"metadata":{},"sourceType":"module"}