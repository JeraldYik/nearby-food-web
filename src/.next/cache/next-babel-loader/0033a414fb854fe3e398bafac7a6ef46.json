{"ast":null,"code":"import Cors from 'cors';\nexport default (async (req, res) => {\n  // if (req.method === 'GET') {\n  //   const apiKey: string = process.env.GOOGLE_APIKEY || '';\n  //   const address = '577047';\n  //   /** DOCUMENTATION\n  //    *  https://developers.google.com/maps/documentation/geocoding/overview\n  //    */\n  //   const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n  //   try {\n  //     const response = await axios.get(geocodeURI);\n  //     if (response.status === 200) {\n  //       if (response.data.status === 'OK') {\n  //         console.log(response.data);\n  //         res.statusCode = 200;\n  //         res.setHeader('Content-Type', 'application/json');\n  //         res.end(JSON.stringify(response.data));\n  //       } else {\n  //         console.log(`Error! ${response.data.status}`);\n  //       }\n  //     } else {\n  //       console.log('There is an Error!\\nReponse Code: ' + response.status.toString());\n  //     }\n  //   } catch (err) {\n  //     console.log('There is an error! Please try again.\\n' + err.toString());\n  //   }\n  // } else {\n  //   throw new Error('Methods other than GET not allowed!');\n  // }\n  console.log('in api'); // Initialize the cors middleware\n\n  const cors = initMiddleware( // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n  Cors({\n    // Only allow requests with GET, POST and OPTIONS\n    methods: ['GET', 'POST', 'OPTIONS']\n  })); // Run cors\n\n  await cors(req, res); // Rest of the API logic\n\n  res.json({\n    message: 'Hello Everyone!'\n  }); // await runMiddlewares(req, res);\n\n  res.statusCode = 200; // res.json({ hello: 'world' });\n});\n\nfunction initMiddleware(middleware) {\n  return (req, res) => new Promise((resolve, reject) => {\n    middleware(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/jerald/Desktop/nearby-food-web/src/pages/api/googleConsole.ts"],"names":["Cors","req","res","console","log","cors","initMiddleware","methods","json","message","statusCode","middleware","Promise","resolve","reject","result","Error"],"mappings":"AAGA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EA9BkE,CAgClE;;AACA,QAAMC,IAAI,GAAGC,cAAc,EACzB;AACAN,EAAAA,IAAI,CAAC;AACH;AACAO,IAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,SAAhB;AAFN,GAAD,CAFqB,CAA3B,CAjCkE,CAyClE;;AACA,QAAMF,IAAI,CAACJ,GAAD,EAAMC,GAAN,CAAV,CA1CkE,CA4ClE;;AACAA,EAAAA,GAAG,CAACM,IAAJ,CAAS;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAT,EA7CkE,CA+ClE;;AACAP,EAAAA,GAAG,CAACQ,UAAJ,GAAiB,GAAjB,CAhDkE,CAiDlE;AACD,CAlDD;;AAoDA,SAASJ,cAAT,CAAwBK,UAAxB,EAAoC;AAClC,SAAO,CAACV,GAAD,EAAMC,GAAN,KACL,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BH,IAAAA,UAAU,CAACV,GAAD,EAAMC,GAAN,EAAYa,MAAD,IAAY;AAC/B,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AACD,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KALS,CAAV;AAMD,GAPD,CADF;AASD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport runMiddlewares from 'lib/api/middlewares';\n\nimport Cors from 'cors';\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  // if (req.method === 'GET') {\n  //   const apiKey: string = process.env.GOOGLE_APIKEY || '';\n  //   const address = '577047';\n\n  //   /** DOCUMENTATION\n  //    *  https://developers.google.com/maps/documentation/geocoding/overview\n  //    */\n  //   const geocodeURI = `https://maps.googleapis.com/maps/api/geocode/json?address=${address} Singapore&key=${apiKey}`;\n\n  //   try {\n  //     const response = await axios.get(geocodeURI);\n  //     if (response.status === 200) {\n  //       if (response.data.status === 'OK') {\n  //         console.log(response.data);\n  //         res.statusCode = 200;\n  //         res.setHeader('Content-Type', 'application/json');\n  //         res.end(JSON.stringify(response.data));\n  //       } else {\n  //         console.log(`Error! ${response.data.status}`);\n  //       }\n  //     } else {\n  //       console.log('There is an Error!\\nReponse Code: ' + response.status.toString());\n  //     }\n  //   } catch (err) {\n  //     console.log('There is an error! Please try again.\\n' + err.toString());\n  //   }\n  // } else {\n  //   throw new Error('Methods other than GET not allowed!');\n  // }\n  console.log('in api');\n\n  // Initialize the cors middleware\n  const cors = initMiddleware(\n    // You can read more about the available options here: https://github.com/expressjs/cors#configuration-options\n    Cors({\n      // Only allow requests with GET, POST and OPTIONS\n      methods: ['GET', 'POST', 'OPTIONS']\n    })\n  );\n\n  // Run cors\n  await cors(req, res);\n\n  // Rest of the API logic\n  res.json({ message: 'Hello Everyone!' });\n\n  // await runMiddlewares(req, res);\n  res.statusCode = 200;\n  // res.json({ hello: 'world' });\n};\n\nfunction initMiddleware(middleware) {\n  return (req, res) =>\n    new Promise((resolve, reject) => {\n      middleware(req, res, (result) => {\n        if (result instanceof Error) {\n          return reject(result);\n        }\n        return resolve(result);\n      });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}